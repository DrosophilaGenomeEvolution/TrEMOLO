{"version": null, "code": "gAMoQxJ0AGQBfA18EGQCjQMBAGQAUwBxAChYBQAAAGlucHV0cQFYBgAAAG91dHB1dHECWAYAAABwYXJhbXNxA1gJAAAAd2lsZGNhcmRzcQRYBwAAAHRocmVhZHNxBVgJAAAAcmVzb3VyY2VzcQZYAwAAAGxvZ3EHWAcAAAB2ZXJzaW9ucQhYBAAAAHJ1bGVxCVgJAAAAY29uZGFfZW52cQpYDwAAAHNpbmd1bGFyaXR5X2ltZ3ELWBAAAABzaW5ndWxhcml0eV9hcmdzcQxYDwAAAHVzZV9zaW5ndWxhcml0eXENWAwAAABiZW5jaF9yZWNvcmRxDlgFAAAAam9iaWRxD1gIAAAAaXNfc2hlbGxxEFgPAAAAYmVuY2hfaXRlcmF0aW9ucRFYCgAAAHNoYWRvd19kaXJxEnRxE11xFChOWCkMAAAKICAgICAgICAKICAgICAgICB7cGFyYW1zLmVudn07CiAgICAgICAgcGF0aF90b19waXBsaW5lPWBkaXJuYW1lIHtwYXJhbXMucGF0aF9zbmt9YAoKICAgICAgICBwcmludGYgIiVzXG4iICJ7cGFyYW1zLmNtZXNzfSBbU05LXSBDUkVBVElPTiBTTkFLRUZJTEUge3BhcmFtcy5jZW5kfSIKCiAgICAgICAgI0FTU01CTFkKICAgICAgICBpZiBbIHtwYXJhbXMuY2hvaWNlX2FzbX0gPSAiVHJ1ZSIgXTsgdGhlbgoKICAgICAgICAgICAgIyMgRXhlbXBsZSBsZXMgaW5zdHJ1Y3Rpb25zIHBhciBkZWZhdWx0IG9ibGlnYXRvaXIKICAgICAgICAgICAgcHJpbnRmICIlcyIgImZseWVfZ2Vub21lID4gcG9saXNoaW5nID4gcmFnb28gIiA+IGluc3RydWN0aW9uLnR4dAoKICAgICAgICAgICAgIyMgQlVJTEQgU05BS0VGSUxFIGVuIGZvbmN0aW9ucyBkZXMgaW5zdHJ1Y3Rpb25zCiAgICAgICAgICAgIHB5dGhvbjMgJHt7cGF0aF90b19waXBsaW5lfX0vbGliL3B5dGhvbi9tYWtlX3Nuay5weSAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udHh0ICAgICAgICAgICAgICAgICAke3twYXRoX3RvX3BpcGxpbmV9fS9saXN0X3J1bGVzLnNuayAgICAgICAgICAgICAgICAgJHt7cGF0aF90b19waXBsaW5lfX0vU25ha2VmaWxlICAgICAgICAgICAgICAgICAtdCAke3twYXRoX3RvX3BpcGxpbmV9fS90ZW1wbGF0ZS5zbmsKCiAgICAgICAgICAgIHByaW50ZiAiJWJcbiIgIntwYXJhbXMuY21lc3N9IFtTTktdIENSRUFUSU9OIFNOQUtFRklMRSBBU1NNQkxZIERPTkUgISB7cGFyYW1zLmNlbmR9IgoKICAgICAgICAgICAgcHJpbnRmICIlYlxuXG4iICJ7cGFyYW1zLmNtZXNzfSBbU05LXSBSVU5OSU5HIFNOQUtFRklMRSB7cGFyYW1zLmNlbmR9IgoKICAgICAgICAgICAgc25ha2VtYWtlIC0tc25ha2VmaWxlICR7e3BhdGhfdG9fcGlwbGluZX19L1NuYWtlZmlsZSAtLWNvbmZpZ2ZpbGUge3BhcmFtcy5uYW1lX2NvbmZpZ2ZpbH0gLS1kcnlydW4gJiYgZXhpdCAyICAgICAgICAgICAgICAgICB8fCAobWVzc2FnZV9mYWlsICIKW1NOSyBJTkZPXSBEUlkgUlVOIEVSUk9SIFBJUEVMSU5FIDogcGxlYXNlIGNoZWNrIHlvdXIgY29uZmlnIGZpbGUKCiIgJiYgZXhpdCAwKQoKCiAgICAgICAgICAgIGlmIFsgJD8gLWVxIDIgXTsgdGhlbgogICAgICAgICAgICAgICAgc25ha2VtYWtlIC0tc25ha2VmaWxlICR7e3BhdGhfdG9fcGlwbGluZX19L1NuYWtlZmlsZSAtLWNvbmZpZ2ZpbGUge3BhcmFtcy5uYW1lX2NvbmZpZ2ZpbH0gICAgICAgICAgICAgICAgICAgICB8fCBtZXNzYWdlX2ZhaWwgIgpbU05LIElORk9dIEVSUk9SIFBJUEVMSU5FCgoiOwogICAgICAgICAgICBmaTsKICAgICAgICBmaTsKCgogICAgICAgICNPVVRTSURFUgogICAgICAgIGlmIFsge3BhcmFtcy5jaG9pY2Vfb3V0c2lkZXJfc3Z9ID0gIlRydWUiIF07IHRoZW4KICAgICAgICAgICAgCiAgICAgICAgICAgICMjIEV4ZW1wbGUgbGVzIGluc3RydWN0aW9uIHBhciBkZWZhdWx0IG9ibGlnYXRvaXIKICAgICAgICAgICAgcHJpbnRmICIlcyIgIm1hcHBpbmcgPiBzYW10b29scyA+IHtwYXJhbXMuY2FsbF9zdn0gPiBibGFzdCA+IGV4dHJhY3RfcmVhZCAiID4gaW5zdHJ1Y3Rpb24udHh0CiAgICAgICAgICAgIAogICAgICAgICAgICAjIyBEZXBlbmQgZHUgZmljaGllciBkZSBjb25maWcKICAgICAgICAgICAgaWYgWyB7cGFyYW1zLkxDX0FTTV9GTFlFfSA9ICJUcnVlIiBdOyB0aGVuCiAgICAgICAgICAgICAgICBwcmludGYgIiVzIiAiPiBhc3NlbWJseV9mbHllICIgID4+IGluc3RydWN0aW9uLnR4dAogICAgICAgICAgICBmaTsKCiAgICAgICAgICAgICMjIERlcGVuZCBkdSBmaWNoaWVyIGRlIGNvbmZpZwogICAgICAgICAgICBpZiBbIHtwYXJhbXMuTENfQVNNX1dUREdCfSA9ICJUcnVlIiBdOyB0aGVuCiAgICAgICAgICAgICAgICBwcmludGYgIiVzIiAiPiBhc3NlbWJseV93ZHRnYiAiICA+PiBpbnN0cnVjdGlvbi50eHQKICAgICAgICAgICAgZmk7CiAgICAgICAgICAgIAogICAgICAgICAgICAjIyBFeGVtcGxlIGxlcyBpbnN0cnVjdGlvbiBwYXIgZGVmYXVsdCBvYmxpZ2F0b2lyCiAgICAgICAgICAgIHByaW50ZiAiJXNcbiIgIj4gZ2V0X1RFX3NlcSA+IFRTRCIgPj4gaW5zdHJ1Y3Rpb24udHh0CgoKICAgICAgICAgICAgIyMgQ3JlYXRpb24gZHUgc25ha2UgZmlsZSBlbiBmb25jdGlvbiBkZXMgaW5zdHJ1Y3Rpb25zCiAgICAgICAgICAgIHB5dGhvbjMgJHt7cGF0aF90b19waXBsaW5lfX0vbGliL3B5dGhvbi9tYWtlX3Nuay5weSAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udHh0ICAgICAgICAgICAgICAgICAke3twYXRoX3RvX3BpcGxpbmV9fS9saXN0X3J1bGVzLnNuayAgICAgICAgICAgICAgICAgJHt7cGF0aF90b19waXBsaW5lfX0vU25ha2VmaWxlICAgICAgICAgICAgICAgICAtdCAke3twYXRoX3RvX3BpcGxpbmV9fS90ZW1wbGF0ZS5zbmsKCgogICAgICAgICAgICBwcmludGYgIiViXG4iICJ7cGFyYW1zLmNtZXNzfSBbU05LXSBDUkVBVElPTiBTTkFLRUZJTEUgT1VUU0lERVIgRE9ORSAhIHtwYXJhbXMuY2VuZH0iCgogICAgICAgICAgICBwcmludGYgIiViXG5cbiIgIntwYXJhbXMuY21lc3N9IFtTTktdIFJVTk5JTkcgU05BS0VGSUxFIHtwYXJhbXMuY2VuZH0iCgogICAgICAgICAgICBzbmFrZW1ha2UgLS1zbmFrZWZpbGUgJHt7cGF0aF90b19waXBsaW5lfX0vU25ha2VmaWxlIC0tY29uZmlnZmlsZSB7cGFyYW1zLm5hbWVfY29uZmlnZmlsfSAtLWRyeXJ1biAmJiBleGl0IDIgICAgICAgICAgICAgICAgIHx8IChtZXNzYWdlX2ZhaWwgIgpbU05LIElORk9dIERSWSBSVU4gRVJST1IgUElQRUxJTkUgOiBwbGVhc2UgY2hlY2sgeW91ciBjb25maWcgZmlsZQoKIiAmJiBleGl0IDApCiAgICAgICAgICAgIAoKICAgICAgICAgICAgaWYgWyAkPyAtZXEgMiBdOyB0aGVuCiAgICAgICAgICAgICAgICBzbmFrZW1ha2UgLS1zbmFrZWZpbGUgJHt7cGF0aF90b19waXBsaW5lfX0vU25ha2VmaWxlIC0tY29uZmlnZmlsZSB7cGFyYW1zLm5hbWVfY29uZmlnZmlsfSAgICAgICAgICAgICAgICAgICAgIHx8IG1lc3NhZ2VfZmFpbCAiCltTTksgSU5GT10gRVJST1IgUElQRUxJTkUKCiI7CiAgICAgICAgICAgIGZpCiAgICAgICAgZmk7CgogICAgICAgIHEVaA5oEYZxFmVYBQAAAHNoZWxscReFcRh0cRku", "rule": "create_snake_file", "input": [], "log": [], "params": ["'./creation_snakefile.snk'", "'./path/to/directory_work'", "'\\x1b[0m'", "'\\x1b[91m'", "'\\x1b[96m'", "'c.yaml'", "'source `dirname ./creation_snakefile.snk`/define_env.sh'", "'svim'", "'{\"DATA\": {\"GENOME\": \"./path/to/genome_file.fasta\", \"SAMPLE\": \"./path/to/reads_file.fastq\", \"WORK_DIRECTORY\": \"./path/to/directory_work\", \"TE_DB\": \"./path/to/database_TE.fasta\"}, \"CHOICE\": {\"PIPELINE\": {\"ASSEMBLY_GENOME\": false, \"OUTSIDER_VARIANT\": true}, \"OUTSIDER_VARIANT\": {\"LOCAL_ASSEMBLY\": {\"FLYE\": false, \"WTDGB\": false}, \"CALL_SV\": \"svim\"}}, \"PARAMS\": {\"OUTSIDER_VARIANT\": {\"MINIMAP2\": {\"PRESET_OPTION\": \"map-ont\", \"OPTION\": \"-t 8\"}, \"SAMTOOLS_VIEW\": {\"PRESET_OPTION\": \"\"}, \"SAMTOOLS_SORT\": {\"PRESET_OPTION\": \"\"}, \"SAMTOOLS_CALLMD\": {\"PRESET_OPTION\": \"\"}, \"FLYE\": {\"OPTIONS\": \"--plasmids -t 30\", \"PRESET_OPTION\": \"--nano-raw\"}}, \"ASSEMBLY_GENOME\": {\"FLYE\": {\"OPTIONS\": \"\", \"PRESET_OPTION\": \"--nano-raw\"}}}}'", "False", "False", "False", "True"], "shellcmd": "\n        \n        source `dirname ./creation_snakefile.snk`/define_env.sh;\n        path_to_pipline=`dirname ./creation_snakefile.snk`\n\n        printf \"%s\\n\" \"\u001b[96m [SNK] CREATION SNAKEFILE \u001b[0m\"\n\n        #ASSMBLY\n        if [ False = \"True\" ]; then\n\n            ## Exemple les instructions par default obligatoir\n            printf \"%s\" \"flye_genome > polishing > ragoo \" > instruction.txt\n\n            ## BUILD SNAKEFILE en fonctions des instructions\n            python3 ${path_to_pipline}/lib/python/make_snk.py                 instruction.txt                 ${path_to_pipline}/list_rules.snk                 ${path_to_pipline}/Snakefile                 -t ${path_to_pipline}/template.snk\n\n            printf \"%b\\n\" \"\u001b[96m [SNK] CREATION SNAKEFILE ASSMBLY DONE ! \u001b[0m\"\n\n            printf \"%b\\n\\n\" \"\u001b[96m [SNK] RUNNING SNAKEFILE \u001b[0m\"\n\n            snakemake --snakefile ${path_to_pipline}/Snakefile --configfile c.yaml --dryrun && exit 2                 || (message_fail \"\n[SNK INFO] DRY RUN ERROR PIPELINE : please check your config file\n\n\" && exit 0)\n\n\n            if [ $? -eq 2 ]; then\n                snakemake --snakefile ${path_to_pipline}/Snakefile --configfile c.yaml                     || message_fail \"\n[SNK INFO] ERROR PIPELINE\n\n\";\n            fi;\n        fi;\n\n\n        #OUTSIDER\n        if [ True = \"True\" ]; then\n            \n            ## Exemple les instruction par default obligatoir\n            printf \"%s\" \"mapping > samtools > svim > blast > extract_read \" > instruction.txt\n            \n            ## Depend du fichier de config\n            if [ False = \"True\" ]; then\n                printf \"%s\" \"> assembly_flye \"  >> instruction.txt\n            fi;\n\n            ## Depend du fichier de config\n            if [ False = \"True\" ]; then\n                printf \"%s\" \"> assembly_wdtgb \"  >> instruction.txt\n            fi;\n            \n            ## Exemple les instruction par default obligatoir\n            printf \"%s\\n\" \"> get_TE_seq > TSD\" >> instruction.txt\n\n\n            ## Creation du snake file en fonction des instructions\n            python3 ${path_to_pipline}/lib/python/make_snk.py                 instruction.txt                 ${path_to_pipline}/list_rules.snk                 ${path_to_pipline}/Snakefile                 -t ${path_to_pipline}/template.snk\n\n\n            printf \"%b\\n\" \"\u001b[96m [SNK] CREATION SNAKEFILE OUTSIDER DONE ! \u001b[0m\"\n\n            printf \"%b\\n\\n\" \"\u001b[96m [SNK] RUNNING SNAKEFILE \u001b[0m\"\n\n            snakemake --snakefile ${path_to_pipline}/Snakefile --configfile c.yaml --dryrun && exit 2                 || (message_fail \"\n[SNK INFO] DRY RUN ERROR PIPELINE : please check your config file\n\n\" && exit 0)\n            \n\n            if [ $? -eq 2 ]; then\n                snakemake --snakefile ${path_to_pipline}/Snakefile --configfile c.yaml                     || message_fail \"\n[SNK INFO] ERROR PIPELINE\n\n\";\n            fi\n        fi;\n\n        ", "incomplete": false, "starttime": 1616155143.0001187, "endtime": 1616155143.3161187, "job_hash": 1292595272439662640, "conda_env": null, "singularity_img_url": null}