###################################################################################################################################
#
# Copyright 2019-2020 IRD-CNRS-Lyon1 University
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/> or
# write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# You should have received a copy of the CeCILL-C license with this program.
# If not see <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt>
#
# Intellectual property belongs to authors and IRD, CNRS, and Lyon 1 University  for all versions
# Version 0.1 written by Mourdas Mohamed
#                                                                                                                                   
####################################################################################################################################


#IMPORT
import json
import os

#Class Color
class bcolors:
    VIOLET    = '\033[95m'
    RED       = '\033[91m'
    BLUE      = '\033[94m'
    CYAN      = '\033[96m'
    GREEN     = '\033[92m'
    WARNING   = '\033[93m'
    FAIL      = '\033[91m'
    BOLD      = '\033[1m'
    END       = '\033[0m'
    UNDERLINE = '\033[4m'

def message_color(color, text):
    return color + text + bcolors.END

# Create ouput folder
os.system("mkdir -p " + config["DATA"]["WORK_DIRECTORY"])

# Remember the parameters associated with the output folder
with open(config["DATA"]["WORK_DIRECTORY"].rstrip("/") + "/params.log", "w") as file:
    file.write(json.dumps(config))


# Get path snakefile
path_snk = ""

i = 0
while i < len(sys.argv) and path_snk == "" :
    if sys.argv[i] == "--snakefile" :
        path_snk = sys.argv[i + 1]

    i += 1
#

name_configfil = ""

i = 0
while i < len(sys.argv) and name_configfil == "" :
    if sys.argv[i] == "--configfile" :
        name_configfil = sys.argv[i + 1]

    i += 1
#

#os.system("cat `dirname " + path_snk + "`/TrEMOLO.txt")


#Map reads on assembly genome
rule create_snake_file :
    input:  


    output:
        "Snakefiles",
    
    params:
        work_directory = config["DATA"]["WORK_DIRECTORY"].rstrip("/"),
        config         = json.dumps(config),

        path_snk       = path_snk,
        name_configfil = name_configfil,

        preset         = config["params"]["MINIMAP2"]["PRESET_OPTION"] if config["params"]["MINIMAP2"]["PRESET_OPTION"] != "" else "map-ont",
        option         = config["params"]["MINIMAP2"]["PRESET_OPTION"],
        FLYE           = config["LOCAL_ASSEMBLY"]["FLYE"],
        WTDGB          = config["LOCAL_ASSEMBLY"]["WTDGB"],

        #COLOR 
        cmess          = bcolors.CYAN,
        cfail          = bcolors.FAIL,
        cend           = bcolors.END,
    shell:
        """
        path_to_pipline=`dirname {params.path_snk}`

        printf "%s\n" "{params.cmess} [SNK] CREATION SNAKEFILE {params.cend}"
        
        ##Exemple les instruction par default obligatoir
        printf "%s" "mapping > samtools > sniffles > blast > extract_read " > instruction.txt
        
        ##Depend tu fichier de config
        if [ {params.FLYE} = "True" ]; then
            printf "%s" "> assembly_flye "  >> instruction.txt
        fi;


        ##Depend tu fichier de config
        if [ {params.WTDGB} = "True" ]; then
            printf "%s" "> assembly_wdtgb "  >> instruction.txt
        fi;
        
        ##Exemple les instruction par default obligatoir
        printf "%s\\n" "> get_TE_seq > TSD" >> instruction.txt


        ##Creation du snake file en fonction des instructions
        python3 ${{path_to_pipline}}/scripts_python/make_snk.py instruction.txt ${{path_to_pipline}}/list_rules.snk Snakefile -t ${{path_to_pipline}}/template.snk

        printf "%s\\n" "{params.cmess} [SNK] CREATION SNAKEFILE DONE !! {params.cend}"

        snakemake --snakefile Snakefile --configfile {params.name_configfil}

        """
        